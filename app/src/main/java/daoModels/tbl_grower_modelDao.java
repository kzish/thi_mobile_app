package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import models.tbl_grower_model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TBL_GROWER_MODEL".
*/
public class tbl_grower_modelDao extends AbstractDao<tbl_grower_model, String> {

    public static final String TABLENAME = "TBL_GROWER_MODEL";

    /**
     * Properties of entity tbl_grower_model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Grower_id = new Property(0, String.class, "grower_id", true, "GROWER_ID");
        public final static Property Growers_name = new Property(1, String.class, "growers_name", false, "GROWERS_NAME");
        public final static Property Physical_adress = new Property(2, String.class, "physical_adress", false, "PHYSICAL_ADRESS");
        public final static Property Mobile_number = new Property(3, String.class, "mobile_number", false, "MOBILE_NUMBER");
        public final static Property Business_number = new Property(4, String.class, "business_number", false, "BUSINESS_NUMBER");
        public final static Property Home_number = new Property(5, String.class, "home_number", false, "HOME_NUMBER");
        public final static Property Email_adress = new Property(6, String.class, "email_adress", false, "EMAIL_ADRESS");
        public final static Property Timb_growers_number = new Property(7, String.class, "timb_growers_number", false, "TIMB_GROWERS_NUMBER");
        public final static Property Timb_registered_name = new Property(8, String.class, "timb_registered_name", false, "TIMB_REGISTERED_NAME");
        public final static Property Grower_contract_adress = new Property(9, String.class, "grower_contract_adress", false, "GROWER_CONTRACT_ADRESS");
        public final static Property Contracted_to = new Property(10, String.class, "contracted_to", false, "CONTRACTED_TO");
        public final static Property No_claim_bnus_rate = new Property(11, String.class, "no_claim_bnus_rate", false, "NO_CLAIM_BNUS_RATE");
        public final static Property Farm_name = new Property(12, String.class, "farm_name", false, "FARM_NAME");
    }


    public tbl_grower_modelDao(DaoConfig config) {
        super(config);
    }
    
    public tbl_grower_modelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TBL_GROWER_MODEL\" (" + //
                "\"GROWER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: grower_id
                "\"GROWERS_NAME\" TEXT," + // 1: growers_name
                "\"PHYSICAL_ADRESS\" TEXT," + // 2: physical_adress
                "\"MOBILE_NUMBER\" TEXT," + // 3: mobile_number
                "\"BUSINESS_NUMBER\" TEXT," + // 4: business_number
                "\"HOME_NUMBER\" TEXT," + // 5: home_number
                "\"EMAIL_ADRESS\" TEXT," + // 6: email_adress
                "\"TIMB_GROWERS_NUMBER\" TEXT," + // 7: timb_growers_number
                "\"TIMB_REGISTERED_NAME\" TEXT," + // 8: timb_registered_name
                "\"GROWER_CONTRACT_ADRESS\" TEXT," + // 9: grower_contract_adress
                "\"CONTRACTED_TO\" TEXT," + // 10: contracted_to
                "\"NO_CLAIM_BNUS_RATE\" TEXT," + // 11: no_claim_bnus_rate
                "\"FARM_NAME\" TEXT);"); // 12: farm_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TBL_GROWER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, tbl_grower_model entity) {
        stmt.clearBindings();
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(1, grower_id);
        }
 
        String growers_name = entity.getGrowers_name();
        if (growers_name != null) {
            stmt.bindString(2, growers_name);
        }
 
        String physical_adress = entity.getPhysical_adress();
        if (physical_adress != null) {
            stmt.bindString(3, physical_adress);
        }
 
        String mobile_number = entity.getMobile_number();
        if (mobile_number != null) {
            stmt.bindString(4, mobile_number);
        }
 
        String business_number = entity.getBusiness_number();
        if (business_number != null) {
            stmt.bindString(5, business_number);
        }
 
        String home_number = entity.getHome_number();
        if (home_number != null) {
            stmt.bindString(6, home_number);
        }
 
        String email_adress = entity.getEmail_adress();
        if (email_adress != null) {
            stmt.bindString(7, email_adress);
        }
 
        String timb_growers_number = entity.getTimb_growers_number();
        if (timb_growers_number != null) {
            stmt.bindString(8, timb_growers_number);
        }
 
        String timb_registered_name = entity.getTimb_registered_name();
        if (timb_registered_name != null) {
            stmt.bindString(9, timb_registered_name);
        }
 
        String grower_contract_adress = entity.getGrower_contract_adress();
        if (grower_contract_adress != null) {
            stmt.bindString(10, grower_contract_adress);
        }
 
        String contracted_to = entity.getContracted_to();
        if (contracted_to != null) {
            stmt.bindString(11, contracted_to);
        }
 
        String no_claim_bnus_rate = entity.getNo_claim_bnus_rate();
        if (no_claim_bnus_rate != null) {
            stmt.bindString(12, no_claim_bnus_rate);
        }
 
        String farm_name = entity.getFarm_name();
        if (farm_name != null) {
            stmt.bindString(13, farm_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, tbl_grower_model entity) {
        stmt.clearBindings();
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(1, grower_id);
        }
 
        String growers_name = entity.getGrowers_name();
        if (growers_name != null) {
            stmt.bindString(2, growers_name);
        }
 
        String physical_adress = entity.getPhysical_adress();
        if (physical_adress != null) {
            stmt.bindString(3, physical_adress);
        }
 
        String mobile_number = entity.getMobile_number();
        if (mobile_number != null) {
            stmt.bindString(4, mobile_number);
        }
 
        String business_number = entity.getBusiness_number();
        if (business_number != null) {
            stmt.bindString(5, business_number);
        }
 
        String home_number = entity.getHome_number();
        if (home_number != null) {
            stmt.bindString(6, home_number);
        }
 
        String email_adress = entity.getEmail_adress();
        if (email_adress != null) {
            stmt.bindString(7, email_adress);
        }
 
        String timb_growers_number = entity.getTimb_growers_number();
        if (timb_growers_number != null) {
            stmt.bindString(8, timb_growers_number);
        }
 
        String timb_registered_name = entity.getTimb_registered_name();
        if (timb_registered_name != null) {
            stmt.bindString(9, timb_registered_name);
        }
 
        String grower_contract_adress = entity.getGrower_contract_adress();
        if (grower_contract_adress != null) {
            stmt.bindString(10, grower_contract_adress);
        }
 
        String contracted_to = entity.getContracted_to();
        if (contracted_to != null) {
            stmt.bindString(11, contracted_to);
        }
 
        String no_claim_bnus_rate = entity.getNo_claim_bnus_rate();
        if (no_claim_bnus_rate != null) {
            stmt.bindString(12, no_claim_bnus_rate);
        }
 
        String farm_name = entity.getFarm_name();
        if (farm_name != null) {
            stmt.bindString(13, farm_name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public tbl_grower_model readEntity(Cursor cursor, int offset) {
        tbl_grower_model entity = new tbl_grower_model( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // grower_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // growers_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // physical_adress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // business_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // home_number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email_adress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timb_growers_number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // timb_registered_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // grower_contract_adress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contracted_to
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // no_claim_bnus_rate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // farm_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, tbl_grower_model entity, int offset) {
        entity.setGrower_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGrowers_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhysical_adress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBusiness_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHome_number(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail_adress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimb_growers_number(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimb_registered_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGrower_contract_adress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContracted_to(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNo_claim_bnus_rate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFarm_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(tbl_grower_model entity, long rowId) {
        return entity.getGrower_id();
    }
    
    @Override
    public String getKey(tbl_grower_model entity) {
        if(entity != null) {
            return entity.getGrower_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(tbl_grower_model entity) {
        return entity.getGrower_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
