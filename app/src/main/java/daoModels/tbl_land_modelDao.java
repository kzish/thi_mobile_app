package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import models.tbl_land_model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TBL_LAND_MODEL".
*/
public class tbl_land_modelDao extends AbstractDao<tbl_land_model, String> {

    public static final String TABLENAME = "TBL_LAND_MODEL";

    /**
     * Properties of entity tbl_land_model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Land_id = new Property(0, String.class, "land_id", true, "LAND_ID");
        public final static Property Land_name = new Property(1, String.class, "land_name", false, "LAND_NAME");
        public final static Property Grower_id = new Property(2, String.class, "grower_id", false, "GROWER_ID");
        public final static Property Land_area = new Property(3, String.class, "land_area", false, "LAND_AREA");
        public final static Property Date_planted = new Property(4, String.class, "date_planted", false, "DATE_PLANTED");
        public final static Property Irrigated = new Property(5, String.class, "irrigated", false, "IRRIGATED");
        public final static Property Amendments = new Property(6, String.class, "amendments", false, "AMENDMENTS");
        public final static Property Land_primed = new Property(7, String.class, "land_primed", false, "LAND_PRIMED");
        public final static Property Latitude = new Property(8, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, String.class, "longitude", false, "LONGITUDE");
        public final static Property BoundaryCoordinates = new Property(10, String.class, "boundaryCoordinates", false, "BOUNDARY_COORDINATES");
        public final static Property ScannedImage = new Property(11, String.class, "scannedImage", false, "SCANNED_IMAGE");
        public final static Property IsSynced = new Property(12, boolean.class, "isSynced", false, "IS_SYNCED");
    }


    public tbl_land_modelDao(DaoConfig config) {
        super(config);
    }
    
    public tbl_land_modelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TBL_LAND_MODEL\" (" + //
                "\"LAND_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: land_id
                "\"LAND_NAME\" TEXT," + // 1: land_name
                "\"GROWER_ID\" TEXT," + // 2: grower_id
                "\"LAND_AREA\" TEXT," + // 3: land_area
                "\"DATE_PLANTED\" TEXT," + // 4: date_planted
                "\"IRRIGATED\" TEXT," + // 5: irrigated
                "\"AMENDMENTS\" TEXT," + // 6: amendments
                "\"LAND_PRIMED\" TEXT," + // 7: land_primed
                "\"LATITUDE\" TEXT," + // 8: latitude
                "\"LONGITUDE\" TEXT," + // 9: longitude
                "\"BOUNDARY_COORDINATES\" TEXT," + // 10: boundaryCoordinates
                "\"SCANNED_IMAGE\" TEXT," + // 11: scannedImage
                "\"IS_SYNCED\" INTEGER NOT NULL );"); // 12: isSynced
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TBL_LAND_MODEL_GROWER_ID ON \"TBL_LAND_MODEL\"" +
                " (\"GROWER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TBL_LAND_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, tbl_land_model entity) {
        stmt.clearBindings();
 
        String land_id = entity.getLand_id();
        if (land_id != null) {
            stmt.bindString(1, land_id);
        }
 
        String land_name = entity.getLand_name();
        if (land_name != null) {
            stmt.bindString(2, land_name);
        }
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(3, grower_id);
        }
 
        String land_area = entity.getLand_area();
        if (land_area != null) {
            stmt.bindString(4, land_area);
        }
 
        String date_planted = entity.getDate_planted();
        if (date_planted != null) {
            stmt.bindString(5, date_planted);
        }
 
        String irrigated = entity.getIrrigated();
        if (irrigated != null) {
            stmt.bindString(6, irrigated);
        }
 
        String amendments = entity.getAmendments();
        if (amendments != null) {
            stmt.bindString(7, amendments);
        }
 
        String land_primed = entity.getLand_primed();
        if (land_primed != null) {
            stmt.bindString(8, land_primed);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(9, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(10, longitude);
        }
 
        String boundaryCoordinates = entity.getBoundaryCoordinates();
        if (boundaryCoordinates != null) {
            stmt.bindString(11, boundaryCoordinates);
        }
 
        String scannedImage = entity.getScannedImage();
        if (scannedImage != null) {
            stmt.bindString(12, scannedImage);
        }
        stmt.bindLong(13, entity.getIsSynced() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, tbl_land_model entity) {
        stmt.clearBindings();
 
        String land_id = entity.getLand_id();
        if (land_id != null) {
            stmt.bindString(1, land_id);
        }
 
        String land_name = entity.getLand_name();
        if (land_name != null) {
            stmt.bindString(2, land_name);
        }
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(3, grower_id);
        }
 
        String land_area = entity.getLand_area();
        if (land_area != null) {
            stmt.bindString(4, land_area);
        }
 
        String date_planted = entity.getDate_planted();
        if (date_planted != null) {
            stmt.bindString(5, date_planted);
        }
 
        String irrigated = entity.getIrrigated();
        if (irrigated != null) {
            stmt.bindString(6, irrigated);
        }
 
        String amendments = entity.getAmendments();
        if (amendments != null) {
            stmt.bindString(7, amendments);
        }
 
        String land_primed = entity.getLand_primed();
        if (land_primed != null) {
            stmt.bindString(8, land_primed);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(9, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(10, longitude);
        }
 
        String boundaryCoordinates = entity.getBoundaryCoordinates();
        if (boundaryCoordinates != null) {
            stmt.bindString(11, boundaryCoordinates);
        }
 
        String scannedImage = entity.getScannedImage();
        if (scannedImage != null) {
            stmt.bindString(12, scannedImage);
        }
        stmt.bindLong(13, entity.getIsSynced() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public tbl_land_model readEntity(Cursor cursor, int offset) {
        tbl_land_model entity = new tbl_land_model( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // land_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // land_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // grower_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // land_area
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date_planted
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // irrigated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // amendments
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // land_primed
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // boundaryCoordinates
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // scannedImage
            cursor.getShort(offset + 12) != 0 // isSynced
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, tbl_land_model entity, int offset) {
        entity.setLand_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLand_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGrower_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLand_area(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate_planted(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIrrigated(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmendments(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLand_primed(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBoundaryCoordinates(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScannedImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsSynced(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(tbl_land_model entity, long rowId) {
        return entity.getLand_id();
    }
    
    @Override
    public String getKey(tbl_land_model entity) {
        if(entity != null) {
            return entity.getLand_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(tbl_land_model entity) {
        return entity.getLand_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
