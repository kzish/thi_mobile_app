package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import models.tbl_leaf_model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TBL_LEAF_MODEL".
*/
public class tbl_leaf_modelDao extends AbstractDao<tbl_leaf_model, Long> {

    public static final String TABLENAME = "TBL_LEAF_MODEL";

    /**
     * Properties of entity tbl_leaf_model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Worksheet_id = new Property(1, int.class, "worksheet_id", false, "WORKSHEET_ID");
        public final static Property Subdivision = new Property(2, int.class, "subdivision", false, "SUBDIVISION");
        public final static Property Grower_id = new Property(3, int.class, "grower_id", false, "GROWER_ID");
        public final static Property Land_id = new Property(4, int.class, "land_id", false, "LAND_ID");
        public final static Property Batch_id = new Property(5, int.class, "batch_id", false, "BATCH_ID");
        public final static Property Plant_id = new Property(6, int.class, "plant_id", false, "PLANT_ID");
        public final static Property Leaf_number = new Property(7, int.class, "leaf_number", false, "LEAF_NUMBER");
        public final static Property Percentage_damage = new Property(8, String.class, "percentage_damage", false, "PERCENTAGE_DAMAGE");
        public final static Property Uploaded = new Property(9, int.class, "uploaded", false, "UPLOADED");
    }


    public tbl_leaf_modelDao(DaoConfig config) {
        super(config);
    }
    
    public tbl_leaf_modelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TBL_LEAF_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WORKSHEET_ID\" INTEGER NOT NULL ," + // 1: worksheet_id
                "\"SUBDIVISION\" INTEGER NOT NULL ," + // 2: subdivision
                "\"GROWER_ID\" INTEGER NOT NULL ," + // 3: grower_id
                "\"LAND_ID\" INTEGER NOT NULL ," + // 4: land_id
                "\"BATCH_ID\" INTEGER NOT NULL ," + // 5: batch_id
                "\"PLANT_ID\" INTEGER NOT NULL ," + // 6: plant_id
                "\"LEAF_NUMBER\" INTEGER NOT NULL ," + // 7: leaf_number
                "\"PERCENTAGE_DAMAGE\" TEXT," + // 8: percentage_damage
                "\"UPLOADED\" INTEGER NOT NULL );"); // 9: uploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TBL_LEAF_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, tbl_leaf_model entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWorksheet_id());
        stmt.bindLong(3, entity.getSubdivision());
        stmt.bindLong(4, entity.getGrower_id());
        stmt.bindLong(5, entity.getLand_id());
        stmt.bindLong(6, entity.getBatch_id());
        stmt.bindLong(7, entity.getPlant_id());
        stmt.bindLong(8, entity.getLeaf_number());
 
        String percentage_damage = entity.getPercentage_damage();
        if (percentage_damage != null) {
            stmt.bindString(9, percentage_damage);
        }
        stmt.bindLong(10, entity.getUploaded());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, tbl_leaf_model entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWorksheet_id());
        stmt.bindLong(3, entity.getSubdivision());
        stmt.bindLong(4, entity.getGrower_id());
        stmt.bindLong(5, entity.getLand_id());
        stmt.bindLong(6, entity.getBatch_id());
        stmt.bindLong(7, entity.getPlant_id());
        stmt.bindLong(8, entity.getLeaf_number());
 
        String percentage_damage = entity.getPercentage_damage();
        if (percentage_damage != null) {
            stmt.bindString(9, percentage_damage);
        }
        stmt.bindLong(10, entity.getUploaded());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public tbl_leaf_model readEntity(Cursor cursor, int offset) {
        tbl_leaf_model entity = new tbl_leaf_model( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // worksheet_id
            cursor.getInt(offset + 2), // subdivision
            cursor.getInt(offset + 3), // grower_id
            cursor.getInt(offset + 4), // land_id
            cursor.getInt(offset + 5), // batch_id
            cursor.getInt(offset + 6), // plant_id
            cursor.getInt(offset + 7), // leaf_number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // percentage_damage
            cursor.getInt(offset + 9) // uploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, tbl_leaf_model entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWorksheet_id(cursor.getInt(offset + 1));
        entity.setSubdivision(cursor.getInt(offset + 2));
        entity.setGrower_id(cursor.getInt(offset + 3));
        entity.setLand_id(cursor.getInt(offset + 4));
        entity.setBatch_id(cursor.getInt(offset + 5));
        entity.setPlant_id(cursor.getInt(offset + 6));
        entity.setLeaf_number(cursor.getInt(offset + 7));
        entity.setPercentage_damage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUploaded(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(tbl_leaf_model entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(tbl_leaf_model entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(tbl_leaf_model entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
