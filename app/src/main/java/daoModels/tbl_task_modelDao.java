package daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import models.tbl_task_model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TBL_TASK_MODEL".
*/
public class tbl_task_modelDao extends AbstractDao<tbl_task_model, String> {

    public static final String TABLENAME = "TBL_TASK_MODEL";

    /**
     * Properties of entity tbl_task_model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Task_id = new Property(0, String.class, "task_id", true, "TASK_ID");
        public final static Property Grower_id = new Property(1, String.class, "grower_id", false, "GROWER_ID");
        public final static Property Grower_name = new Property(2, String.class, "grower_name", false, "GROWER_NAME");
        public final static Property Land_area = new Property(3, String.class, "land_area", false, "LAND_AREA");
        public final static Property Grower_number = new Property(4, String.class, "grower_number", false, "GROWER_NUMBER");
        public final static Property Land_id = new Property(5, String.class, "land_id", false, "LAND_ID");
        public final static Property Land_name = new Property(6, String.class, "land_name", false, "LAND_NAME");
        public final static Property Claim_stage = new Property(7, int.class, "claim_stage", false, "CLAIM_STAGE");
        public final static Property Claim_submitted = new Property(8, String.class, "claim_submitted", false, "CLAIM_SUBMITTED");
        public final static Property Directions_to_farm = new Property(9, String.class, "directions_to_farm", false, "DIRECTIONS_TO_FARM");
    }


    public tbl_task_modelDao(DaoConfig config) {
        super(config);
    }
    
    public tbl_task_modelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TBL_TASK_MODEL\" (" + //
                "\"TASK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: task_id
                "\"GROWER_ID\" TEXT," + // 1: grower_id
                "\"GROWER_NAME\" TEXT," + // 2: grower_name
                "\"LAND_AREA\" TEXT," + // 3: land_area
                "\"GROWER_NUMBER\" TEXT," + // 4: grower_number
                "\"LAND_ID\" TEXT," + // 5: land_id
                "\"LAND_NAME\" TEXT," + // 6: land_name
                "\"CLAIM_STAGE\" INTEGER NOT NULL ," + // 7: claim_stage
                "\"CLAIM_SUBMITTED\" TEXT," + // 8: claim_submitted
                "\"DIRECTIONS_TO_FARM\" TEXT);"); // 9: directions_to_farm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TBL_TASK_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, tbl_task_model entity) {
        stmt.clearBindings();
 
        String task_id = entity.getTask_id();
        if (task_id != null) {
            stmt.bindString(1, task_id);
        }
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(2, grower_id);
        }
 
        String grower_name = entity.getGrower_name();
        if (grower_name != null) {
            stmt.bindString(3, grower_name);
        }
 
        String land_area = entity.getLand_area();
        if (land_area != null) {
            stmt.bindString(4, land_area);
        }
 
        String grower_number = entity.getGrower_number();
        if (grower_number != null) {
            stmt.bindString(5, grower_number);
        }
 
        String land_id = entity.getLand_id();
        if (land_id != null) {
            stmt.bindString(6, land_id);
        }
 
        String land_name = entity.getLand_name();
        if (land_name != null) {
            stmt.bindString(7, land_name);
        }
        stmt.bindLong(8, entity.getClaim_stage());
 
        String claim_submitted = entity.getClaim_submitted();
        if (claim_submitted != null) {
            stmt.bindString(9, claim_submitted);
        }
 
        String directions_to_farm = entity.getDirections_to_farm();
        if (directions_to_farm != null) {
            stmt.bindString(10, directions_to_farm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, tbl_task_model entity) {
        stmt.clearBindings();
 
        String task_id = entity.getTask_id();
        if (task_id != null) {
            stmt.bindString(1, task_id);
        }
 
        String grower_id = entity.getGrower_id();
        if (grower_id != null) {
            stmt.bindString(2, grower_id);
        }
 
        String grower_name = entity.getGrower_name();
        if (grower_name != null) {
            stmt.bindString(3, grower_name);
        }
 
        String land_area = entity.getLand_area();
        if (land_area != null) {
            stmt.bindString(4, land_area);
        }
 
        String grower_number = entity.getGrower_number();
        if (grower_number != null) {
            stmt.bindString(5, grower_number);
        }
 
        String land_id = entity.getLand_id();
        if (land_id != null) {
            stmt.bindString(6, land_id);
        }
 
        String land_name = entity.getLand_name();
        if (land_name != null) {
            stmt.bindString(7, land_name);
        }
        stmt.bindLong(8, entity.getClaim_stage());
 
        String claim_submitted = entity.getClaim_submitted();
        if (claim_submitted != null) {
            stmt.bindString(9, claim_submitted);
        }
 
        String directions_to_farm = entity.getDirections_to_farm();
        if (directions_to_farm != null) {
            stmt.bindString(10, directions_to_farm);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public tbl_task_model readEntity(Cursor cursor, int offset) {
        tbl_task_model entity = new tbl_task_model( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // task_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // grower_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // grower_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // land_area
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // grower_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // land_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // land_name
            cursor.getInt(offset + 7), // claim_stage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // claim_submitted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // directions_to_farm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, tbl_task_model entity, int offset) {
        entity.setTask_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGrower_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGrower_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLand_area(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGrower_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLand_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLand_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClaim_stage(cursor.getInt(offset + 7));
        entity.setClaim_submitted(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDirections_to_farm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(tbl_task_model entity, long rowId) {
        return entity.getTask_id();
    }
    
    @Override
    public String getKey(tbl_task_model entity) {
        if(entity != null) {
            return entity.getTask_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(tbl_task_model entity) {
        return entity.getTask_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
